# -*- mode: ruby -*-
# vi: set ft=ruby :


# Defaults for config options defined in CONFIG
$os ||= "ubuntu/bionic64"
$num_instances ||= 3
$instance_name_prefix ||= "ceph-node"
$subnet ||= "10.8.41"
$src_data ||= "./data"
$dst_data ||= "/mnt/data"
$mnt_data_ssh ||= "/mnt/data/ssh"

Vagrant.configure("2") do |config|
  config.vagrant.plugins = ["vagrant-cachier", "vagrant-hostmanager"]

  config.vm.box = $os
  config.ssh.forward_agent = true
  config.ssh.insert_key = false
  config.hostmanager.enabled = true
  config.cache.scope = :box


  # The Ceph client will be our client machine to mount volumes and interact with the cluster
  config.vm.define "ceph-client" do |client|
    client.vm.hostname = "ceph-client"
    client.vm.network :private_network, ip: "#{$subnet}.202"
    
    client.vm.synced_folder $src_data, $dst_data,
      type: "sshfs", 
      sshfs_opts_append: "-o nonempty -o cache=no"

    # ceph-deploy will assume remote machines have python2 installed
    client.vm.provision :shell, inline:  <<-SCRIPT
      DEBIAN_FRONTEND=noninteractive
      apt-get update && apt-get install -yq python
      chmod +x /mnt/data/ssh/init.sh && /mnt/data/ssh/init.sh
    SCRIPT
  end

  # We provision three nodes to be Ceph servers
  (1..3).each do |i|
    config.vm.define "ceph-server-#{i}" do |server|
      server.vm.hostname = "ceph-server-#{i}"
      server.vm.network :private_network, ip: "#{$subnet}.#{i+210}"
            
      server.vm.synced_folder $src_data, $dst_data,
        type: "sshfs", 
        sshfs_opts_append: "-o nonempty -o cache=no"

      # ceph-deploy will assume remote machines have python2 installed
      server.vm.provision :shell, inline:  <<-SCRIPT
        DEBIAN_FRONTEND=noninteractive
        apt-get update && apt-get install -yq python
        chmod +x /mnt/data/ssh/init.sh && /mnt/data/ssh/init.sh
      SCRIPT
    end
  end

    # We need one Ceph admin machine to manage the cluster
    config.vm.define "ceph-admin" do |admin|
      admin.vm.hostname = "ceph-admin"
      admin.vm.network :private_network, ip: "#{$subnet}.201"
      
      admin.vm.synced_folder $src_data, $dst_data,
        type: "sshfs", 
        sshfs_opts_append: "-o nonempty -o cache=no"
      
      # ceph-deploy will assume remote machines have python2 installed
      admin.vm.provision :shell, inline: <<-SCRIPT
        DEBIAN_FRONTEND=noninteractive
        apt-get update && apt-get install -yq ntp ceph-deploy
        chmod +x /mnt/data/ssh/init.sh && /mnt/data/ssh/init.sh
        chmod +x /mnt/data/ceph/init.sh && su vagrant bash -c "/mnt/data/ceph/init.sh"
      SCRIPT
    end
end